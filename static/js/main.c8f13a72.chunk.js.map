{"version":3,"sources":["bean.svg","components/twemoji.js","components/header.js","components/map.js","components/table.js","App.js","index.js"],"names":["module","exports","memo","emoji","dangerouslySetInnerHTML","__html","twemoji","parse","folder","ext","useStyles","makeStyles","theme","root","flexGrow","title","Header","classes","id","AppBar","position","Toolbar","Typography","variant","className","Button","size","onClick","window","open","myIcon","L","Icon","iconUrl","require","iconSize","Point","CoffeeMap","props","state","dataMaps","Map","style","height","width","zoom","maxZoom","center","attributionControl","TileLayer","url","attribution","AttributionControl","prefix","spiderfyDistanceMultiplier","showCoverageOnHover","maxClusterRadius","this","dataMapsProp","filter","x","coordinates","map","dataItem","k","city","roaster","Marker","icon","key","Tooltip","direction","offset","opacity","href","Component","CoffeeTable","TableContainer","component","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","name","scope","target","rel","provider","BingProvider","params","process","App","fetch","then","response","json","data","a","batchRowValues","valueRanges","values","rows","i","length","rowObject","j","push","index","search","query","providerResult","y","setState","console","log","Grid","container","spacing","item","xs","sm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8f13a72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bean.5c039dac.svg\";","import React, { memo } from 'react'\nimport twemoji from 'twemoji'\n\n// Using the official https://github.com/twitter/twemoji from Twitter\n// With an excellent example from https://gist.github.com/chibicode/fe195d792270910226c928b69a468206\n\nconst Twemoji = ({ emoji }) => (\n    <span\n        dangerouslySetInnerHTML={{\n            __html: twemoji.parse(emoji, {\n                folder: 'svg',\n                ext: '.svg'\n            })\n        }}\n    />\n)\n\nexport default memo(Twemoji)","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Twemoji from './twemoji';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nfunction Header() {\n\n    const classes = useStyles();\n    return (\n        <div id=\"header\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Twemoji emoji=\"â˜•\" /> Bay Area Coffee Roasters\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        onClick={() => {\n                            window.open('https://docs.google.com/spreadsheets/d/1u7jiqY1qM0jYWugn1dFiW3plQrvWysJqm8xXhO35zuU/edit?usp=sharing', \"_blank\");\n                        }}>\n                        Add Roaster\n                        </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { Map, Marker, TileLayer, Tooltip, AttributionControl } from \"react-leaflet\";\nimport L from 'leaflet';\nimport \"leaflet/dist/leaflet.css\";\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport \"react-leaflet-markercluster/dist/styles.min.css\";\n\n// Leaflet custom marker\nconst myIcon = new L.Icon({\n    // Coffee bean attribution -- Thanks! https://commons.wikimedia.org/wiki/File:Coffee_bean_symbol.svg\n    iconUrl: require('../bean.svg'),\n    iconSize: new L.Point(25, 25),\n    className: 'leaflet-bean-icon'\n});\n\nclass CoffeeMap extends Component {\n\n    // Initial state\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataMaps: []\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Map\n                    style={{ height: \"89vh\", width: \"100%\" }}\n                    zoom={9}\n                    maxZoom={20}\n                    center={[37.6, -122.5]}\n                    attributionControl={false}>\n                    <TileLayer url=\"https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png\"\n                        attribution=\"&copy; <a href='https://stadiamaps.com/'>Stadia Maps</a>, &copy; and <a href='http://openstreetmap.org'>OpenStreetMap</a> contributors\"\n                    />\n\n                    <AttributionControl position=\"bottomright\" prefix={false} />\n\n                    <MarkerClusterGroup\n                        spiderfyDistanceMultiplier={1}\n                        showCoverageOnHover={false}\n                        maxClusterRadius={35}\n                    >\n                        {this.props.dataMapsProp.filter(x => { return x.coordinates; }).map((dataItem, k) => {\n                            let { city, coordinates, roaster, url } = dataItem;\n                            return (\n                                <Marker onClick={() => { window.open(url) }}\n                                    icon={myIcon}\n                                    key={k}\n                                    center={[coordinates[0], coordinates[1]]}\n                                    position={[coordinates[0], coordinates[1]]}\n                                >\n                                    <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                                        <span><a href={url}>{roaster}</a></span>\n                                        <span>{city}, CA</span>\n                                    </Tooltip>\n                                </Marker>);\n                        })}\n                    </MarkerClusterGroup>\n                </Map>\n            </div>\n        );\n    }\n}\n\nexport default CoffeeMap;","import React, { Component } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nclass CoffeeTable extends Component {\n\n  render() {\n\n    return (\n      <TableContainer component={Paper}>\n        <Table size=\"small\" stickyHeader aria-label=\"Coffee Table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Roaster</TableCell>\n              <TableCell align=\"right\">City</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.props.dataMapsProp && this.props.dataMapsProp.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <a href={row.url} target=\"_blank\" rel=\"noopener noreferrer\" >\n                    {row.roaster}\n                  </a>\n                </TableCell>\n                <TableCell align=\"right\">{row.city}, CA</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}\n\nexport default CoffeeTable;","import React, { Component } from 'react';\nimport './App.css';\nimport { BingProvider } from 'leaflet-geosearch';\nimport Header from './components/header';\nimport CoffeeMap from './components/map.js';\nimport CoffeeTable from './components/table';\n\n// Material-UI\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n// Google Sheets API -- PROD\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1u7jiqY1qM0jYWugn1dFiW3plQrvWysJqm8xXhO35zuU/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=' + process.env.REACT_APP_GOOGLE_SHEETS_API_KEY;\n\n// Google Sheets API -- DEV\n// const API = 'https://sheets.googleapis.com/v4/spreadsheets/1jQI6PstbEArW_3xDnGgPJR6_37r_KjLoa765bOgMBhk/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=' + process.env.REACT_APP_GOOGLE_SHEETS_API_KEY;\n\n// Provider for leaflet-geosearch plugin\nconst provider = new BingProvider({\n  params: {\n    key: process.env.REACT_APP_BING_MAPS_API_KEY\n  },\n});\n\nclass App extends Component {\n\n  // Initial state\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataMaps: []\n    }\n  }\n\n  componentDidMount() {\n    // Google Sheets API\n    // Based on the helpful demo by https://github.com/kpennell/sheetsdemo\n    fetch(API)\n      .then(response => response.json())\n      .then(async (data) => {\n        let batchRowValues = data.valueRanges[0].values;\n        const rows = [];\n        for (let i = 1; i < batchRowValues.length; i++) {\n          let rowObject = {};\n          for (let j = 0; j < batchRowValues[i].length; j++) {\n            rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n          }\n          rows.push(rowObject);\n        }\n\n        for (let index in rows) {\n          let city = rows[index].city;\n          // console.log(city);\n\n          try {\n            let providerResult = await provider.search({ query: city + ', CA, United States' });\n            rows[index].coordinates = [providerResult[0].y, providerResult[0].x];\n            this.setState({ dataMaps: rows });\n          }\n          catch (e) {\n            console.log(e);\n          }\n        }\n\n        // console.log(this.state.dataMaps);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={8}>\n            <Paper>\n              <CoffeeMap dataMapsProp={this.state.dataMaps} />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <Paper>\n              <CoffeeTable dataMapsProp={this.state.dataMaps} />\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}