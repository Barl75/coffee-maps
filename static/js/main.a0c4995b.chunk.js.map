{"version":3,"sources":["bean.svg","components/twemoji.js","components/header.js","components/map.js","components/table.js","App.js","index.js"],"names":["module","exports","memo","emoji","dangerouslySetInnerHTML","__html","twemoji","parse","folder","ext","useStyles","makeStyles","theme","root","flexGrow","title","Header","classes","id","AppBar","position","Toolbar","Typography","variant","className","Button","size","onClick","window","open","myIcon","L","Icon","iconUrl","require","iconSize","Point","provider","BingProvider","params","key","process","CoffeeMap","props","state","dataMaps","fetch","then","response","json","data","a","batchRowValues","valueRanges","values","rows","i","length","rowObject","j","push","index","city","search","query","providerResult","coordinates","y","x","setState","console","log","Map","style","height","width","zoom","maxZoom","center","attributionControl","TileLayer","url","attribution","AttributionControl","prefix","spiderfyDistanceMultiplier","showCoverageOnHover","maxClusterRadius","this","filter","map","dataItem","k","roaster","Marker","icon","Tooltip","direction","offset","opacity","href","Component","CoffeeTable","TableContainer","component","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","name","scope","target","rel","paper","textAlign","color","palette","text","secondary","App","Grid","container","spacing","item","xs","sm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0c4995b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bean.5c039dac.svg\";","import React, { memo } from 'react'\nimport twemoji from 'twemoji'\n\n// Using the official https://github.com/twitter/twemoji from Twitter\n// With an excellent example from https://gist.github.com/chibicode/fe195d792270910226c928b69a468206\n\nconst Twemoji = ({ emoji }) => (\n    <span\n        dangerouslySetInnerHTML={{\n            __html: twemoji.parse(emoji, {\n                folder: 'svg',\n                ext: '.svg'\n            })\n        }}\n    />\n)\n\nexport default memo(Twemoji)","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Twemoji from './twemoji';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nfunction Header() {\n\n    const classes = useStyles();\n    return (\n        <div id=\"header\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Twemoji emoji=\"â˜•\" /> Bay Area Coffee Roasters\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        onClick={() => {\n                            window.open('https://docs.google.com/spreadsheets/d/1u7jiqY1qM0jYWugn1dFiW3plQrvWysJqm8xXhO35zuU/edit?usp=sharing', \"_blank\");\n                        }}>\n                        Add Roaster\n                        </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { BingProvider } from 'leaflet-geosearch';\nimport { Map, Marker, TileLayer, Tooltip, AttributionControl } from \"react-leaflet\";\nimport L from 'leaflet';\nimport \"leaflet/dist/leaflet.css\";\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport \"react-leaflet-markercluster/dist/styles.min.css\";\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1u7jiqY1qM0jYWugn1dFiW3plQrvWysJqm8xXhO35zuU/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=' + process.env.REACT_APP_GOOGLE_SHEETS_API_KEY;\n\n// Leaflet custom marker\nconst myIcon = new L.Icon({\n    // Coffee bean attribution -- Thanks! https://commons.wikimedia.org/wiki/File:Coffee_bean_symbol.svg\n    iconUrl: require('../bean.svg'),\n    iconSize: new L.Point(25, 25),\n    className: 'leaflet-bean-icon'\n});\n\n// Provider for leaflet-geosearch plugin\nconst provider = new BingProvider({\n    params: {\n        key: process.env.REACT_APP_BING_MAPS_API_KEY\n    },\n});\n\nclass CoffeeMap extends Component {\n\n    // Initial state\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataMaps: []\n        }\n    }\n\n    componentDidMount() {\n        // Google Sheets API\n        // Based on the helpful demo by https://github.com/kpennell/sheetsdemo\n        fetch(API)\n            .then(response => response.json())\n            .then(async (data) => {\n                let batchRowValues = data.valueRanges[0].values;\n                const rows = [];\n                for (let i = 1; i < batchRowValues.length; i++) {\n                    let rowObject = {};\n                    for (let j = 0; j < batchRowValues[i].length; j++) {\n                        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n                    }\n                    rows.push(rowObject);\n                }\n\n                for (let index in rows) {\n                    let city = rows[index].city;\n                    // console.log(city);\n\n                    try {\n                        let providerResult = await provider.search({ query: city + ', CA, United States' });\n                        rows[index].coordinates = [providerResult[0].y, providerResult[0].x];\n                        this.setState({ dataMaps: rows });\n                    }\n                    catch (e) {\n                        console.log(e);\n                    }\n                }\n\n                // console.log(this.state.dataMaps);\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <Map\n                    style={{ height: \"89vh\", width: \"100%\" }}\n                    zoom={9}\n                    maxZoom={20}\n                    center={[37.6, -122.5]}\n                    attributionControl={false}>\n                    <TileLayer url=\"https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png\"\n                        attribution=\"&copy; <a href='https://stadiamaps.com/'>Stadia Maps</a>, &copy; and <a href='http://openstreetmap.org'>OpenStreetMap</a> contributors\"\n                    />\n                    {/* <TileLayer url=\"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}{r}.png\"\n                        attribution=\"Map by <a href='https://wikimediafoundation.org/wiki/Maps_Terms_of_Use' target='_blank'>Wikimedia</a> | &copy; <a href='https://www.openstreetmap.org/copyright' target='_blank'>OpenStreetMap</a> contributors\"\n                    /> */}\n\n                    <AttributionControl position=\"bottomright\" prefix={false} />\n\n                    <MarkerClusterGroup\n                        spiderfyDistanceMultiplier={1}\n                        showCoverageOnHover={false}\n                        maxClusterRadius={35}\n                    >\n                        {this.state.dataMaps.filter(x => { return x.coordinates; }).map((dataItem, k) => {\n                            let { city, coordinates, roaster, url } = dataItem;\n                            return (\n                                <Marker onClick={() => { window.open(url) }}\n                                    icon={myIcon}\n                                    key={k}\n                                    center={[coordinates[0], coordinates[1]]}\n                                    position={[coordinates[0], coordinates[1]]}\n                                >\n                                    <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                                        <span><a href={url}>{roaster}</a></span>\n                                        <span>{city}, CA</span>\n                                    </Tooltip>\n                                </Marker>);\n                        })}\n                    </MarkerClusterGroup>\n                </Map>\n            </div>\n        );\n    }\n}\n\nexport default CoffeeMap;","import React, { Component } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1u7jiqY1qM0jYWugn1dFiW3plQrvWysJqm8xXhO35zuU/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=' + process.env.REACT_APP_GOOGLE_SHEETS_API_KEY;\n\nclass CoffeeTable extends Component {\n\n  // Initial state\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rows: []\n    }\n  }\n\n  componentDidMount() {\n    // Google Sheets API\n    // Based on the helpful demo by https://github.com/kpennell/sheetsdemo\n    fetch(API)\n      .then(response => response.json())\n      .then(data => {\n        let batchRowValues = data.valueRanges[0].values;\n        const rows = [];\n\n        for (let i = 1; i < batchRowValues.length; i++) {\n          let rowObject = {};\n          for (let j = 0; j < batchRowValues[i].length; j++) {\n            rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n          }\n          rows.push(rowObject);\n        }\n\n        this.setState({ rows: rows });\n        // console.log(this.state.items);\n      });\n\n  }\n\n  render() {\n\n    if (this.state.rows.length === 0) {\n      return null;\n    }\n\n    return (\n      <TableContainer component={Paper}>\n        <Table size=\"small\" stickyHeader aria-label=\"Coffee Table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Roaster</TableCell>\n              <TableCell align=\"right\">City</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.rows.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <a href={row.url} target=\"_blank\" rel=\"noopener noreferrer\" >\n                    {row.roaster}\n                  </a>\n                </TableCell>\n                <TableCell align=\"right\">{row.city}, CA</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}\n\nexport default CoffeeTable;","import React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport CoffeeMap from './components/map.js';\nimport CoffeeTable from './components/table';\n\n// Material-UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={8}>\n          <Paper className={classes.paper}>\n            <CoffeeMap />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Paper className={classes.paper}>\n            <CoffeeTable />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}